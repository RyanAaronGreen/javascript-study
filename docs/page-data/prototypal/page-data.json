{"componentChunkName":"component---src-templates-blog-post-js","path":"/prototypal/","result":{"data":{"site":{"siteMetadata":{"title":"A Study into the Details of JavaScript"}},"markdownRemark":{"id":"359a1e6a-442c-52eb-8fce-833bc3c5f0ee","excerpt":"What is the difference between the  and  keywords? They do work very similarly, but the biggest different is their rules in regards to scope.  The  keyword isâ€¦","html":"<h3>What is the difference between the <code class=\"language-text\">var</code> and <code class=\"language-text\">let</code> keywords?</h3>\n<p>They do work very similarly, but the biggest different is their rules in regards to scope. </p>\n<p>The <code class=\"language-text\">var</code> keyword is hoisted to the top of the function in which it is called. Therefore, it can find itself in different locations. </p>\n<p>The <code class=\"language-text\">let</code> keyword on the otherhand is <strong><em>block scoped</em></strong>. Meaning that the variable of a <code class=\"language-text\">let</code> keyword can only be accessed by those within its scope. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Bear</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> grizzly <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bear</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grizzly'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> black <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bear</span><span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> polar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bear</span><span class=\"token punctuation\">(</span><span class=\"token string\">'polar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>grizzly<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">,</span> polar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>The Prototype Chain</h2>","frontmatter":{"title":"Class & Prototypal Inheritance","date":"March 25, 2020","description":"Exploring the world of closures"}}},"pageContext":{"slug":"/prototypal/","previous":{"fields":{"slug":"/hoisting/"},"frontmatter":{"title":"Hoisting"}},"next":null}}}